#!/bin/bash
# dpxderiver
version=0.2
# author: dave rice dave@dericed.com
# description: This is a very specific script intended to take a collection of DPX images and a WAV audio file as an input and then create multiple derivatives using ffmpeg and libx264
# dependencies: The script expects to use ffmpeg version 1.1 or higher compiled with libx264 and libfaac. Configure libx264 with either --bit-depth=8 or --bit-depth=10 as you wish.
# testing: If you need to generate sample files for testing this script I recommend making them via:
# mkdir -p dpx_package_path/images dpx_package_path/audio
# ffmpeg -f lavfi -i testsrc=s=1920x1080:d=10:r=ntsc-film -start_number 100000 dpx_package_path/images/%06d.dpx
# ffmpeg -f lavfi -i aevalsrc="sin(440*2*PI*t):cos(430*2*PI*t)::c=stereo:s=48000:d=10" -c pcm_s24le dpx_package_path/audio/1.wav

usage(){
    echo
    echo "$(basename ${0})"
    echo "Transcode DPX file sets to pre-determined outputs."
    echo "Usage: $(basename ${0}) [ -d /output/directory/ ] package [ package2 package3 ... ]"
    echo " -d <directory>   - Set directory for the output files."
    echo " -o <outputs>     - List the output formats desired, separate multiple with '+'."
    echo " -h               - Display this help"
    echo
    echo "Examples:"
    echo "  dpxderiver -o dnxhd+losslessh264 /a/folder/of/dpx/images"
    echo "  will make both an dnxhd and a lossless h264 output"
    echo
    echo "  dpxderiver -o losslessh264 -d /output/folder /a/folder/of/dpx/images"
    echo "  will only output a lossless h264 file into the /output/folder directory."
    exit
}

output_options_lossless_dir=""
output_options_dnxhd_dir=""

# command-line options to set mediaid and original variables
OPTIND=1

_checkdir(){
    while [ "${*}" != "" ] ; do
        dir2check="${1}"
        if [ ! -d "${dir2check}" ] ; then
            echo "Error: ${dir2check} is not found"
            exit 1
        fi
        shift
    done
}

_checkwritable(){
    while [ "${*}" != "" ] ; do
        thing2check="${1}"
        if [ ! -w "${thing2check}" ] ; then
            echo "Error: ${thing2check} is not writable"
            exit 1
        fi
        shift
    done
}

_checkreadable(){
    while [ "${*}" != "" ] ; do
        thing2check="${1}"
        if [ ! -r "${thing2check}" ] ; then
            echo "Error: ${thing2check} is not readable"
            exit 1
        fi
        shift
    done
}

_mkdir(){
    # _mkdir is a local function that makes directories if needed and exits if they can't be made
    while [ "${*}" != "" ] ; do
        dir2make="${1}"
        if [ ! -d "${dir2make}" ] ; then
            mkdir -p "${dir2make}"
            if [[ "${?}" != 0 ]] ; then
                echo "Error: Can not create ${dir2make}"
                exit 1
            fi
        fi
        shift
    done
}

while getopts ":d:o:h" opt; do
case "${opt}" in
        d)  _checkdir "${OPTARG}"
            _checkwritable "${OPTARG}"
            output_options_lossless_dir="${OPTARG}"
            output_options_dnxhd_dir="${OPTARG}"
            ;;
        o)  outputs="${OPTARG/+/ }" ;;
        h)  usage ;;
        *)  echo "bad option -${OPTARG}" ; usage ;;
        :)  echo "Option -${OPTARG} requires an argument" ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

if [ "${#}" = 0 ] ; then
    usage
fi

while [ "${*}" != "" ] ; do
    dpx_package_path="${1}"

    baselosslessoutputfilename=$(basename "${1}")
    imagepath="${dpx_package_path}/images"
    audiopath="${dpx_package_path}/audio"
    _checkdir "${dpx_package_path}" "${imagepath}" "${audiopath}"

    # presumed variables
    logspath="${dpx_package_path}/logs"
    start_number="100000"
    firstimagefile=$(find "${imagepath}" -type f -iname "*${start_number}.dpx" | head -n 1)
    if  [ ! "${firstimagefile}" ] ; then
        firstimagefile=$(find "${imagepath}" -type f -iname "*dpx"| sort | head -n 1)
        start_number=$(basename "${firstimagefile}" | grep -o '[0-9]\{6\}')
    fi
    if  [ ! "${firstimagefile}" ] ; then
        echo The image file name and pattern can not be deduced.
        exit 1
    fi
    patternfilename=$(echo "${firstimagefile}" | sed "s/${start_number}/%06d/")
    if [ -z "${start_number}" ] ; then
        echo ERROR Unable to discover number pattern of the filenames
        exit 1
    fi
    audiofile=$(find "${audiopath}" -type f -iname '*.wav' | head -n 1)  # need to offset audio to match dpx from 10000
    overwrite_outputs="y" # must equal "y" to overwrite outputs, "n" to skip any operation that would overwrite, or "" to prompt to user to decide

    unset output_options
    unset input_options

    #dnxhd output options
    if [[ $(echo "${outputs}" | grep -w "dnxhd") ]] ; then
        output_options+=(-c:v dnxhd)
        output_options+=(-pix_fmt yuv422p10le)
        output_options+=(-s 1920x1080)
        output_options+=(-b:v 175M)
        output_options+=(-r ntsc-film)
        if [ -f "$audiofile" ] ; then
            output_options+=(-c:a copy)
        fi
        if [ ! "${output_options_dnxhd_dir}" ] ; then
            output_options_dnxhd_dir="${dpx_package_path}/dnxhd"
        fi
        output_options_dnxhd_name="dnxhd.mov"
        output_options+=("${output_options_dnxhd_dir}/${output_options_dnxhd_name}")
        _mkdir "$output_options_dnxhd_dir"
    fi

    # lossless output options
    if [[ $(echo "${outputs}" | grep -w "losslessh264") ]] ; then
        output_options+=(-c:v libx264)
        output_options+=(-pix_fmt yuv422p10le)
        output_options+=(-qp 0) # force constant QT, 0=lossless
        if [ -f "${audiofile}" ] ; then
            output_options+=(-c:a copy)
        fi
        if [ ! "${output_options_lossless_dir}" ] ; then
            output_options_lossless_dir="${dpx_package_path}/lossless"
        fi
        output_options_lossless_name="${baselosslessoutputfilename}.mov"
        output_options+=("${output_options_lossless_dir}/${output_options_lossless_name}")
        _mkdir "${output_options_lossless_dir}"
    fi

    unset audioinput
    if [ -f "${audiofile}" ] ; then
        audioinput=(-i "${audiofile}")
    fi

    if [ "${input_frame_rate}" = "" ] ; then
    echo "What frame rate should be used to interpret the input? "
        PS3="Selection? "
        select input_frame_rate in "12" "16" "18" "20" "22" "24000/1001" "24" "25" "30"
        do
            break
        done
    fi
    echo "Selected frame rate is ${input_frame_rate}"

    # set input_options for transcoding
    input_options+=(-v warning)
    input_options+=(-stats)
    input_options+=(-start_number ${start_number})
    input_options+=(-r ${input_frame_rate})
    if [ "${overwrite_outputs}" ] ; then
        input_options+=(-"${overwrite_outputs}")
    fi

    # set up logging directory and environment variables
    _mkdir "${logspath}"
    export FFREPORT="file=${logspath}/%p_%t_$(basename "${0}")_${version}.log"

    # check for minimal required files
    _checkreadable "${firstimagefile}"

    ffmpeg ${input_options[@]} -i "${patternfilename}" ${audioinput[@]} ${output_options[@]}
    shift
done
echo
echo DONE
